//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/wolfgang/cs/csbp/CSBP.UnitTest/Resources/Idg/Idg.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class IdgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, ID=22, STRING=23, WS=24, NL=25, 
		ML_COMMENT=26, SL_COMMENT=27;
	public const int
		RULE_model = 0, RULE_mainmodel = 1, RULE_abstractelement = 2, RULE_sqlstatement = 3, 
		RULE_droptable = 4;
	public static readonly string[] ruleNames = {
		"model", "mainmodel", "abstractelement", "sqlstatement", "droptable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Modell'", "'if'", "'exists'", "'('", "'select'", "'*'", "'from'", 
		"'sysobjects'", "'where'", "'id'", "'='", "'object_id'", "')'", "'and'", 
		"'sysstat'", "'&'", "'0xf'", "'3'", "'drop'", "'table'", "'GO'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ID", "STRING", 
		"WS", "NL", "ML_COMMENT", "SL_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IdgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IdgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IdgParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainmodelContext mainmodel() {
			return GetRuleContext<MainmodelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractelementContext[] abstractelement() {
			return GetRuleContexts<AbstractelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractelementContext abstractelement(int i) {
			return GetRuleContext<AbstractelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(IdgParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(IdgParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ML_COMMENT() { return GetTokens(IdgParser.ML_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ML_COMMENT(int i) {
			return GetToken(IdgParser.ML_COMMENT, i);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIdgVisitor<TResult> typedVisitor = visitor as IIdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 0, RULE_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 10;
				Match(T__0);
				State = 11;
				mainmodel();
				}
			}

			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS || _la==ML_COMMENT) {
				{
				{
				State = 14;
				_la = TokenStream.LA(1);
				if ( !(_la==WS || _la==ML_COMMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 20;
				abstractelement();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 26;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainmodelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IdgParser.ID, 0); }
		public MainmodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainmodel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIdgVisitor<TResult> typedVisitor = visitor as IIdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainmodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainmodelContext mainmodel() {
		MainmodelContext _localctx = new MainmodelContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainmodel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlstatementContext sqlstatement() {
			return GetRuleContext<SqlstatementContext>(0);
		}
		public AbstractelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIdgVisitor<TResult> typedVisitor = visitor as IIdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractelement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractelementContext abstractelement() {
		AbstractelementContext _localctx = new AbstractelementContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstractelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			sqlstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DroptableContext droptable() {
			return GetRuleContext<DroptableContext>(0);
		}
		public SqlstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIdgVisitor<TResult> typedVisitor = visitor as IIdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlstatementContext sqlstatement() {
		SqlstatementContext _localctx = new SqlstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_sqlstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			droptable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(IdgParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IdgParser.ID, 0); }
		public DroptableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIdgVisitor<TResult> typedVisitor = visitor as IIdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDroptable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DroptableContext droptable() {
		DroptableContext _localctx = new DroptableContext(Context, State);
		EnterRule(_localctx, 8, RULE_droptable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(T__1);
			State = 35;
			Match(T__2);
			State = 36;
			Match(T__3);
			State = 37;
			Match(T__4);
			State = 38;
			Match(T__5);
			State = 39;
			Match(T__6);
			State = 40;
			Match(T__7);
			State = 41;
			Match(T__8);
			State = 42;
			Match(T__9);
			State = 43;
			Match(T__10);
			State = 44;
			Match(T__11);
			State = 45;
			Match(T__3);
			State = 46;
			Match(STRING);
			State = 47;
			Match(T__12);
			State = 48;
			Match(T__13);
			State = 49;
			Match(T__14);
			State = 50;
			Match(T__15);
			State = 51;
			Match(T__16);
			State = 52;
			Match(T__10);
			State = 53;
			Match(T__17);
			State = 54;
			Match(T__12);
			State = 55;
			Match(T__18);
			State = 56;
			Match(T__19);
			State = 57;
			Match(ID);
			State = 58;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '?', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\xF', '\n', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x15', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1B', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', 
		'\x6', '\b', '\n', '\x2', '\x3', '\x4', '\x2', '\x1A', '\x1A', '\x1C', 
		'\x1C', '\x2', '<', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\n', '$', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\r', '\a', '\x3', '\x2', '\x2', '\r', '\xF', '\x5', '\x4', '\x3', 
		'\x2', '\xE', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x13', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', 
		'\t', '\x2', '\x2', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x6', '\x4', '\x2', '\x17', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\a', '\x2', '\x2', '\x3', '\x1D', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x18', '\x2', '\x2', 
		'\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', '\b', '\x5', 
		'\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x5', '\n', 
		'\x6', '\x2', '#', '\t', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x4', 
		'\x2', '\x2', '%', '&', '\a', '\x5', '\x2', '\x2', '&', '\'', '\a', '\x6', 
		'\x2', '\x2', '\'', '(', '\a', '\a', '\x2', '\x2', '(', ')', '\a', '\b', 
		'\x2', '\x2', ')', '*', '\a', '\t', '\x2', '\x2', '*', '+', '\a', '\n', 
		'\x2', '\x2', '+', ',', '\a', '\v', '\x2', '\x2', ',', '-', '\a', '\f', 
		'\x2', '\x2', '-', '.', '\a', '\r', '\x2', '\x2', '.', '/', '\a', '\xE', 
		'\x2', '\x2', '/', '\x30', '\a', '\x6', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x19', '\x2', '\x2', '\x31', '\x32', '\a', '\xF', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x10', '\x2', '\x2', '\x33', '\x34', '\a', '\x11', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x12', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x13', '\x2', '\x2', '\x36', '\x37', '\a', '\r', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x14', '\x2', '\x2', '\x38', '\x39', '\a', '\xF', 
		'\x2', '\x2', '\x39', ':', '\a', '\x15', '\x2', '\x2', ':', ';', '\a', 
		'\x16', '\x2', '\x2', ';', '<', '\a', '\x18', '\x2', '\x2', '<', '=', 
		'\a', '\x17', '\x2', '\x2', '=', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\xE', '\x13', '\x19',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
